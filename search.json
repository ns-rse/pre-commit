[
  {
    "objectID": "index.html#view-these-slides",
    "href": "index.html#view-these-slides",
    "title": "Pre-commit : Protecting your future self",
    "section": "View these slides‚Ä¶",
    "text": "View these slides‚Ä¶\n\nns-rse.github.io/pre-commit/\n\nYou can scan this QR code and it will take you to these slides or you can visit the site they are hosted at by going to ns-rse.github.io/pre-commit/"
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Pre-commit : Protecting your future self",
    "section": "Introduction",
    "text": "Introduction\n\nResearch Software Engineer at University of Sheffield\nBackground : Statistical Genetics, Medical Statistics and Data Scientist for Telematics Company\nBlog Post (2022-10-10) : pre-commit : Protecting your future self\n\n\n\nGood morning/afternoon, my name is Neil Shephard and I‚Äôm a Research Software Engineer at the University of Sheffield.\nI was invited here today by Alex Coleman, thank you Alex, on the back of a blog post I wrote pre-commit : Protecting your Future Self and the QR code will take you to the blog post if you‚Äôre quick enough to scan it before I move on.\nA very brief overview of my background and experience as I‚Äôve only worked as a Research Software Engineer for a little under a year and matured into this role after a convoluted career pathway via Statistical Genetics, Medical Statistics during which I developed a keen interest in reproducible research and started using Git.\nPrior to starting in my current role I spent a few years as a Data Scientist at a telematics company where I didn‚Äôt really do much data science but did learn Python, working collaboratively with Git and good practices for software development and engineering."
  },
  {
    "objectID": "index.html#structure",
    "href": "index.html#structure",
    "title": "Pre-commit : Protecting your future self",
    "section": "Structure",
    "text": "Structure\n\n(Very) brief Git version control.\nA digression into Linting and Testing.\nGit Hooks.\npre-commit installation.\npre-commit configuration.\npre-commit usage.\npre-commit in CI/CD.\n\n\nIn this talk I‚Äôll give a very brief overview of using Git for version control before making a digression into linting and testing. We‚Äôll then look at Git Hooks because they underpin the functionality of pre-commit and I‚Äôll then go through installing and configuring pre-commit, hopefully give a demonstration that won‚Äôt fail and then show how pre-commit can be integrated into Continuous Integration and Delivery pipelines."
  },
  {
    "objectID": "index.html#git",
    "href": "index.html#git",
    "title": "Pre-commit : Protecting your future self",
    "section": "Git",
    "text": "Git\n\nxkcd (1597)\nOk, Git is pretty popular but could I have a show of hands for how many people are familiar with and use Git on a daily basis please?\nPause\nGreat, looks like most of the audience are familiar with Git and hopefully are a little more proficient than the XKCD protagonists."
  },
  {
    "objectID": "index.html#git-workflow",
    "href": "index.html#git-workflow",
    "title": "Pre-commit : Protecting your future self",
    "section": "Git Workflow",
    "text": "Git Workflow\n\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true,'showCommitLabel': true, 'rotateCommitLabel': true}} }%%\ngitGraph\n    commit\n    commit\n    branch feature1\n    checkout main\n    commit\n    checkout feature1\n    commit\n    commit\n    checkout main\n    branch feature2\n    checkout feature2\n    commit\n    commit\n    checkout feature1\n    commit\n    checkout main\n    merge feature1 tag: \"v0.1.1\"\n    checkout feature2\n    commit\n    commit\n    checkout main\n    merge feature2 tag: \"v0.1.2\"\n    commit\n\n\n\n\n\n\n\n\n\nA typical workflow of a version controlled directory is shown here\n\nMake a branch from main to add a feature and here we have two features being developed.\nEdit some files on each branch\nStaging and commit changes as you go, then when ready you.\nPush the changes to the remote origin such as GitHub or GitLab\nMake a pull request to merge these changes into the main branch.\nIf you‚Äôre lucky you won‚Äôt have any merge conflicts. and once approved\nOnce approved and merged another commit is made marking the inclusion of the changes and a tag can optionally be applied.\n\nThat gives got an overview of the Git development cycle and how commits fit in we‚Äôll move on to linting and testing."
  },
  {
    "objectID": "index.html#linting-and-testing",
    "href": "index.html#linting-and-testing",
    "title": "Pre-commit : Protecting your future self",
    "section": "Linting and Testing",
    "text": "Linting and Testing\nA digression‚Ä¶\n\nGood practice to lint code & conform to Style Guides\nGood practice to have tests in place for code.\n\n\nWhen writing code and its good practice to lint your code to ensure it conforms to the languages style guides. These are useful because if code is written in a consistent style it makes it easier for multiple people, including your future self to read and understand.\nSimilarly it is sensible, and some would argue essential, to write tests to ensure that your functions, methods and sclasses work as expected. These tests are run regularly against your code base as it is developed to ensure that changes made to the code don‚Äôt break.\nOften these will be run as you write your code and as part of the Continuous Integration pipelines."
  },
  {
    "objectID": "index.html#a-simple-function",
    "href": "index.html#a-simple-function",
    "title": "Pre-commit : Protecting your future self",
    "section": "A simple üêç function",
    "text": "A simple üêç function\nsample.py\nimport numpy as np\n\nfrom pathlib import Path\n\ndef find_files(file_path: Union[str, Path], file_ext: str) -> List:\n    \"\"\"Recursively find files of the stated type along the given file path.\"\"\"\n    # We have a really long comment on this line just for demonstration purposes so that we can generate a few errors that need linting\n    try:\n        return list(Path(file_path).rglob(f\"**{file_ext}\"))\n    except:\n        raise\n\nThis is a simple function in Python that we‚Äôll use to demonstrate linting and tests. You don‚Äôt need to be too familiar with Python to understand and follow along but a quick explanation is that a few libraries are imported, then the function find_files is defined, it takes two arguments a file path and a file extension and it will recursively find all files ending with the given extension along that path, and if an exception is encountered it is raised."
  },
  {
    "objectID": "index.html#a-simple-test",
    "href": "index.html#a-simple-test",
    "title": "Pre-commit : Protecting your future self",
    "section": "A Simple Test",
    "text": "A Simple Test\ntest_sample.py\nfrom .sample import find_files\n\ndef test_find_files():\n    \"\"\"Test the find_files() function\"\"\"\n    py_files = find_files(file_path=\"./\", file_ext=\".py\")\n    assert isinstance(py_files, list)\n    assert \"sample.py\" in py_files\n\nThis is an example of a test that you might write to check the find_files function.\nIt imports the function and uses it to look in the current directory for files with the extension .py saving the results to py_files. The type of this is checked and it should be a list and then a check is made for the presence of the file sample.py in that list is made."
  },
  {
    "objectID": "index.html#linting-and-testing-tools",
    "href": "index.html#linting-and-testing-tools",
    "title": "Pre-commit : Protecting your future self",
    "section": "Linting and Testing Tools",
    "text": "Linting and Testing Tools\n\nblack PEP8 compliance.\nflake8 PEP8 compliance.\npylint PEP8 compliance, code smells and refactoring suggestions.\npytest\n\n\nWe‚Äôve got some sample code but it might not meet the style guides.\nStyle guides set out a consistent way to write and structure code and there are guides for different languages and sometimes even different styles within a language. For Python there is the PEP8 style guide and there are a number of tools that help with linting Python code to be comply with PEP8 such as black which mostly applies formatting, flake8 and pylint which check formatting and also look for code smells where poor design patterns have been used and make refactoring suggestions.\nThen there is the pytest framework for writing and running tests which I can highly recommend along with many of its extensions."
  },
  {
    "objectID": "index.html#linting-and-testing-manually",
    "href": "index.html#linting-and-testing-manually",
    "title": "Pre-commit : Protecting your future self",
    "section": "Linting and Testing manually‚Ä¶",
    "text": "Linting and Testing manually‚Ä¶\nblack sample.py\nflake8 sample.py\npylint sample.py\npytest test_sample.py\n(Who‚Äôs to Blame?)\n\nIf you were running linting manually then you would have to invoke each and run them against a specific file or directory.\nRunning black against your code base could actually cause problems as it will reformat files in place using its opinionated style. You would then have to commit those changes and the blame would be associated with code that you only formatted rather than wrote. There are ways around this using Git‚Äôs --ignore-rev flag to store commits in a file .git-blame-ignore-revs that lists the hashes for which blame is to be ignored (see article)"
  },
  {
    "objectID": "index.html#linting-manually",
    "href": "index.html#linting-manually",
    "title": "Pre-commit : Protecting your future self",
    "section": "Linting manually",
    "text": "Linting manually\nblack\n‚ù± black sample.py\nAll done! ‚ú® üç∞ ‚ú®\n1 file changed.\nflake8\n‚ù± flake8 sample.py\nsample.py:1:1: D100 Missing docstring in public module\nsample.py:1:1: F401 'numpy as np' imported but unused\nsample.py:2:1: F401 'pandas as pd' imported but unused\nsample.py:7:36: F821 undefined name 'Union'\nsample.py:7:73: F821 undefined name 'List'\nsample.py:8:80: E501 line too long (87 > 79 characters)\nsample.py:9:80: E501 line too long (135 > 79 characters)\nsample.py:12:5: E722 do not use bare 'except'\npylint\n‚ù± pylint sample.py\n************* Module sample\nsample.py:9:0: C0301: Line too long (135/120) (line-too-long)\nsample.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nsample.py:7:35: E0602: Undefined variable 'Union' (undefined-variable)\nsample.py:7:72: E0602: Undefined variable 'List' (undefined-variable)\nsample.py:12:4: W0706: The except handler raises immediately (try-except-raise)\nsample.py:4:0: C0411: standard import \"from pathlib import Path\" should be placed before \"import numpy as np\" (wrong-import-order)\nsample.py:1:0: W0611: Unused numpy imported as np (unused-import)\nsample.py:2:0: W0611: Unused pandas imported as pd (unused-import)\n\n-------------------------------------\nYour code has been rated at -10.00/10\npytest\n‚ù± pylint test_sample.py\n================= test session starts =================\nplatform linux -- Python 3.7.11, pytest-7.1.1, pluggy-1.0.0\nrootdir: /home/neil/work/projects/pre-commit/assets/python\nplugins: hydra-core-1.2.0, regtest-1.5.0, cov-3.0.0\ncollected 0 items / 1 error\n\n======================= ERRORS ========================\n___________ ERROR collecting test_sample.py ___________\ntest_sample.py:1: in <module>\n    from .sample import find_files\nsample.py:7: in <module>\n    def find_and_load_files(file_path: Union[str, Path], file_type: str):\nE   NameError: name 'Union' is not defined\n================ short test summary info ===============\nERROR test_sample.py - NameError: name 'Union' is not defined\n!!!!!!!! Interrupted: 1 error during collection !!!!!!!!\n=================== 1 error in 0.49s ==================="
  },
  {
    "objectID": "index.html#then-you-can-commit-and-push",
    "href": "index.html#then-you-can-commit-and-push",
    "title": "Pre-commit : Protecting your future self",
    "section": "‚Ä¶then you can commit and push",
    "text": "‚Ä¶then you can commit and push\n\n\nGit work cycles encourages regular saving of work, by staging and committing work into Git. Periodically you should Git push to ensure your work is backed up just in case of fires or your hard drive failing.\nBut the process of repeatedly linting and testing your code quickly becomes tedious and you may even forget to do so before making commits. This means there is potential for errors to creep into the code base if these steps aren‚Äôt undertaken.\nWhat can we do to mitigate this?"
  },
  {
    "objectID": "index.html#automate-with-pre-commit",
    "href": "index.html#automate-with-pre-commit",
    "title": "Pre-commit : Protecting your future self",
    "section": "Automate with pre-commit",
    "text": "Automate with pre-commit\n\nUses Git Hooks to run checks automatically.\nWritten in Python but hooks for most languages.\nLarge number of supported hooks available to use.\n\n\nThis is where pre-commit comes in handy. It uses Git Hooks to run checks automatically.\nIt‚Äôs written in Python but you don‚Äôt need to know or use Python yourself to use pre-commit as there are a large number of existing pre-commit hooks that are available to be used off the shelf."
  },
  {
    "objectID": "index.html#what-are-hooks",
    "href": "index.html#what-are-hooks",
    "title": "Pre-commit : Protecting your future self",
    "section": "What are Hooks?",
    "text": "What are Hooks?\n\nActions that are run prior to or in response to a given action.\n\n‚ù± ls -lha .git/hooks\ndrwxr-xr-x neil neil 4.0 KB Mon Oct 24 10:26:37 2022 ÔÑï .\ndrwxr-xr-x neil neil 4.0 KB Tue Jan  3 18:48:37 2023 ÔÑï ..\n.rwxr-xr-x neil neil 478 B  Sun Aug 14 13:35:27 2022 Ôíâ applypatch-msg.sample\n.rwxr-xr-x neil neil 896 B  Sun Aug 14 13:35:27 2022 Ôíâ commit-msg.sample\n.rwxr-xr-x neil neil 4.6 KB Sun Aug 14 13:35:27 2022 Ôíâ fsmonitor-watchman.sample\n.rwxr-xr-x neil neil 189 B  Sun Aug 14 13:35:27 2022 Ôíâ post-update.sample\n.rwxr-xr-x neil neil 424 B  Sun Aug 14 13:35:27 2022 Ôíâ pre-applypatch.sample\n.rwxr-xr-x neil neil 1.6 KB Sun Aug 14 13:35:27 2022 Ôíâ pre-commit.sample\n.rwxr-xr-x neil neil 416 B  Sun Aug 14 13:35:27 2022 Ôíâ pre-merge-commit.sample\n.rwxr-xr-x neil neil 1.3 KB Sun Aug 14 13:35:27 2022 Ôíâ pre-push.sample\n.rwxr-xr-x neil neil 4.8 KB Sun Aug 14 13:35:27 2022 Ôíâ pre-rebase.sample\n.rwxr-xr-x neil neil 544 B  Sun Aug 14 13:35:27 2022 Ôíâ pre-receive.sample\n.rwxr-xr-x neil neil 1.5 KB Sun Aug 14 13:35:27 2022 Ôíâ prepare-commit-msg.sample\n.rwxr-xr-x neil neil 2.7 KB Sun Aug 14 13:35:27 2022 Ôíâ push-to-checkout.sample\n.rwxr-xr-x neil neil 3.6 KB Sun Aug 14 13:35:27 2022 Ôíâ update.sample\n\nHooks are actions that are run prior to or in response to a given action.\nWhen you initialise a Git repository locally a number of example run hooks that are disabled by default but could be run in response to different actions or steps in the git work cycle and these can be found under .git/hooks/ if you‚Äôve cloned a repository then these .git directory generally isn‚Äôt included so you won‚Äôt have these.\nThis is a directory listing and you can see there are a number of different stages at which hooks might apply, but as the name of this talk gives away, the key hook of interest here is the pre-commit hook.\nThese are Bash scripts and you could sit down and craft your own script to undertake all the tasks you wish to run prior to making commits. The pre-commit tool and its array of hooks takes away the need to do this and saves you a lot of time as all you need to do is configure the hooks you wish to run."
  },
  {
    "objectID": "index.html#installation-of-pre-commit",
    "href": "index.html#installation-of-pre-commit",
    "title": "Pre-commit : Protecting your future self",
    "section": "Installation of pre-commit",
    "text": "Installation of pre-commit\n\n\nPython\n‚ù± workon a_virtual_env  # Optional\n‚ù± pip install pre-commit\nConda Environment\n‚ù± conda activate conda_env\n‚ù± conda install -c \\\n        conda-forge pre-commit\n\nGNU/Linux\n# Arch\n‚ù± pacman -Syu python-pre-commit\n# Gentoo\n‚ù± emerge -av pre-commit\n# Debian/Ubuntu\n‚ù± sudo apt install pre-commit\nOSX\n‚ù± brew install pre-commit\n\n\n\nI mentioned earlier that you didn‚Äôt really need to know or use Python which was mostly true but you do need to install pre-commit this can be done using pip the Python tool for installing Python packages from the Python Package Index and you can optionally do this within a virtual environment or within a Conda Environment.\nIf you use GNU/Linux then many package managers have pre-commit available in the package repositories to install and some examples of how to install the relevant packages under Arch, Gentoo and Ubuntu are shown.\nThe OSX package manager homebrew also includes pre-commit so you can brew install."
  },
  {
    "objectID": "index.html#pre-commit-config.yaml",
    "href": "index.html#pre-commit-config.yaml",
    "title": "Pre-commit : Protecting your future self",
    "section": ".pre-commit-config.yaml",
    "text": ".pre-commit-config.yaml\nRoot of a project under Git version control.\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.3.0  # Use the ref you want to point at\n    hooks:\n      - id: trailing-whitespace\n        types: [file, text]\n      - id: end-of-file-fixer\n        types: [file, text]\n      - id: check-docstring-first\n      - id: check-case-conflict\n      - id: requirements-txt-fixer\n      - id: check-byte-order-marker\n      - id: check-yaml\n  - repo: https://github.com/psf/black\n    rev: 22.10.0\n    hooks:\n      - id: black\n        types: [python]\n        additional_dependencies: ['click==8.0.4']\n        args: [\"--extend-exclude\", \"plotting.py\"]\n  - repo: https://github.com/pycqa/flake8.git\n    rev: 5.0.4\n    hooks:\n      - id: flake8\n        args: [\"--extend-exclude\", \"_version.py\"]\n        additional_dependencies: [flake8-print]\n        types: [python]\n  - repo: local\n    hooks:\n      - id: pylint\n        args: [\"--rcfile=.pylintrc\"]\n        name: Pylint\n        entry: python -m pylint\n        language: system\n        files: \\.py$\n  - repo: local\n    hooks:\n      - id: pytest\n        name: pytest\n        entry: pytest --cov\n        language:system"
  },
  {
    "objectID": "index.html#hook-configuration",
    "href": "index.html#hook-configuration",
    "title": "Pre-commit : Protecting your future self",
    "section": "Hook configuration",
    "text": "Hook configuration\n  - repo: https://github.com/psf/black\n    rev: 22.10.0\n    hooks:\n      - id: black\n        types: [python]\n        additional_dependencies: ['click==8.0.4']\n        args: [\"--extend-exclude\", \"plotting.py\"]"
  },
  {
    "objectID": "index.html#local-hook-configuration",
    "href": "index.html#local-hook-configuration",
    "title": "Pre-commit : Protecting your future self",
    "section": "Local Hook Configuration",
    "text": "Local Hook Configuration\n  - repo: local\n    hooks:\n      -id: pytest\n      name: pytest\n      entry: pytest --cov\n      language: system"
  },
  {
    "objectID": "index.html#project-pre-commit-installation",
    "href": "index.html#project-pre-commit-installation",
    "title": "Pre-commit : Protecting your future self",
    "section": "Project pre-commit installation",
    "text": "Project pre-commit installation\n‚ù± git add .pre-commit-config\n‚ù± pre-commit --version\n‚ù± pre-commit install\npre-commit installed at .git/hooks/pre-commit\n\nNow that pre-commit is installed on your system and a configuration file has been added to your repository you can install the pre-commit hook in the repository.\nYou add the configuration file to the repository, check that pre-commit is available using the --version flag and then install it."
  },
  {
    "objectID": "index.html#check-existing-files",
    "href": "index.html#check-existing-files",
    "title": "Pre-commit : Protecting your future self",
    "section": "Check existing Files",
    "text": "Check existing Files\n‚ù± pre-commit run --all-files\n[INFO] Initializing environment for https://github.com/pre-commit/pre-commit-hooks.\n[INFO] Initializing environment for https://github.com/psf/black.\n[INFO] Initializing environment for https://github.com/pycqa/flake8.git.\n[INFO] Installing environment for https://github.com/pre-commit/pre-commit-hooks.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\n[INFO] Installing environment for https://github.com/psf/black.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\n[INFO] Installing environment for https://github.com/pycqa/flake8.git\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nCheck Yaml.....................................................Passed\nFix End of Files...............................................Passed\nTrim Trailing Whitespace.......................................Failed\n- hook id: trailing-whitespace\n- exit code: 1\n\nFiles were modified by this hook. Additional output:\n\nFixing sample.py\n\nblack..........................................................Failed\nreformatted sample.py\n\nAll done! ‚ú® üç∞ ‚ú®\n1 file reformatted.\nflake8.........................................................Failed\n- hook id: flake8\n- exit code: 1\n\nsample.py:1:1: D100 Missing docstring in public module\nsample.py:1:1: F401 'numpy as np' imported but unused\nsample.py:2:1: F401 'pandas as pd' imported but unused\nsample.py:7:36: F821 undefined name 'Union'\nsample.py:7:73: F821 undefined name 'List'\nsample.py:8:80: E501 line too long (87 > 79 characters)\nsample.py:9:80: E501 line too long (135 > 79 characters)\nsample.py:12:5: E722 do not use bare 'except'\n\npylint.........................................................Failed\n- hook id: pylint\n- exit code: 1\n\n************* Module python.sample\nsample.py:9:0: C0301: Line too long (135/120) (line-too-long)\nsample.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nsample.py:7:35: E0602: Undefined variable 'Union' (undefined-variable)\nsample.py:12:4: W0706: The except handler raises immediately (try-except-raise)\nsample.py:1:0: W0611: Unused numpy imported as np (unused-import)\nsample.py:2:0: W0611: Unused pandas imported as pd (unused-import)\nsample.py:4:0: C0411: standard import \"from pathlib import Path\" should be placed before \"import numpy as np\" (wrong-import-order)\n\n------------------------------------\nYour code has been rated at -3.75/10\npytest.........................................................Failed\n================= test session starts =================\nplatform linux -- Python 3.7.11, pytest-7.1.1, pluggy-1.0.0\nrootdir: /home/neil/work/projects/pre-commit/assets/python\nplugins: hydra-core-1.2.0, regtest-1.5.0, cov-3.0.0\ncollected 0 items / 1 error\n\n======================= ERRORS ========================\n___________ ERROR collecting test_sample.py ___________\ntest_sample.py:1: in <module>\n    from .sample import find_files\nsample.py:7: in <module>\n    def find_and_load_files(file_path: Union[str, Path], file_type: str):\nE   NameError: name 'Union' is not defined\n================ short test summary info ===============\nERROR test_sample.py - NameError: name 'Union' is not defined\n!!!!!!!! Interrupted: 1 error during collection !!!!!!!!\n=================== 1 error in 0.49s ==================="
  },
  {
    "objectID": "index.html#correcting-errors",
    "href": "index.html#correcting-errors",
    "title": "Pre-commit : Protecting your future self",
    "section": "Correcting Errors",
    "text": "Correcting Errors\nOriginal sample.py\nimport numpy as np\n\nfrom pathlib import Path\n\ndef find_files(file_path: Union[str, Path], file_ext: str) -> list:\n    \"\"\"Recursively find files of the stated type along the given file path.\"\"\"\n    # Short comment\n    try:\n        return list(Path(file_path).rglob(f\"**{file_ext}\"))\n    except:\n        raise\nLinted\n\"\"\"Find files of a given type \"\"\"\nfrom pathlib import Path\nfrom typing import Union\n\n\ndef find_files(file_path: Union[str, Path], file_type: str) -> list:\n    \"\"\"Recursively find files of the stated type along the given file path.\"\"\"\n    return Path(file_path).rglob(f\"*{file_type}\")"
  },
  {
    "objectID": "index.html#add-and-commit-changes",
    "href": "index.html#add-and-commit-changes",
    "title": "Pre-commit : Protecting your future self",
    "section": "Add and commit changes",
    "text": "Add and commit changes\ngit add sample.py test_sample.py\ngit commit -m \"Linting sample.py.\"\nCheck Yaml.....................................................Passed\nFix End of Files...............................................Passed\nTrim Trailing Whitespace.......................................Passed\nblack..........................................................Passed\nflake8.........................................................Passed\npylint.........................................................Passed\npytest.........................................................Passed\n[INFO] Restored changes from /home/neil/.cache/pre-commit/patch1674045267-394193.\n[main 05b1568] Linting sample.py\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\nSo now we add the files and commit them and because we have installed pre-commit it runs as a hook and the checks we configured are run against the files we are committing, in this case sample.py.\nThe tests pass and so the commit is made. The [INFO] line sometimes appears when you have unstaged changes that are not included in current commit.\nThis is much quicker and efficient than having to run black, flake8, pylint and pytest against the changed files manually, there is no cognitive overhead involved in thinking about what files to run against as there may be in larger changes. You might consider running linting and tests against the whole code base but this could be problematic if there are unlinted files and if its a large code base with lots of tests take a long time to run. With pre-commit the linting and tests run only against the files included in the commit and so are faster.\nThis all streamlines the process and frees up developer time.\nBut its contingent on people using the tools locally, what if you have a contributor who hasn‚Äôt set themselves up with pre-commit as described and they make a pull request to have their bug fix or feature included. Is there a way to apply these checks against their pull request before it is committed to the master or main branch?"
  },
  {
    "objectID": "index.html#continuous-integrationdelivery-cicd",
    "href": "index.html#continuous-integrationdelivery-cicd",
    "title": "Pre-commit : Protecting your future self",
    "section": "Continuous Integration/Delivery (CI/CD)",
    "text": "Continuous Integration/Delivery (CI/CD)\n\nRuns hooks on GitHub/GitLab/Codeberg/etc. in response to specific tasks/actions.\nGitHub Actions (see also Actions Marketplace)\nGitLab Pipelines\nCodeberg uses Woodpecker CI\nJenkins\n\n\nFortunately there is because many projects use Continuous Integration.\nThis involves running checks on Pull Requests before merging changes into main and master and running various checks against them such as test suites or linting. Continuous delivery extends this and builds packages for release and tests that these work so they are ready to deploy.\nGitHub has Actions for performing these tasks, whilst GitLab has pipelines, Codeberg uses Woodpecker CI and another popular framework is Jenkins.\nI‚Äôm going to talk about GitHub Actions."
  },
  {
    "objectID": "index.html#github-actions",
    "href": "index.html#github-actions",
    "title": "Pre-commit : Protecting your future self",
    "section": "GitHub Actions",
    "text": "GitHub Actions\n\nActions are hooks that run under certain conditions e.g.¬†push to main branch or tag beginning with v.\nUseful for CI/CD.\nDefined in .github/workflows/*.yaml\nWrite your own pre-commit.yaml or‚Ä¶\n\n\n\n‚Ä¶use pre-commit.ci\n\n\nGitHub Actions are hooks in that they are processes that run when certain conditions are met for example a push to the main branch, or a commit has a tag applied.\nAs mentioned they are useful for running Continuous Integration and Delivery and in a Git repository they are defined in YAML files that live in the .github/workflows/ directory.\nYou could write your own Action and save it in say pre-commit.yaml in this directory but there is an even easier service to use in the form of pre-commit.ci which is a CI extension to pre-commit."
  },
  {
    "objectID": "index.html#pre-commit.ci",
    "href": "index.html#pre-commit.ci",
    "title": "Pre-commit : Protecting your future self",
    "section": "pre-commit.ci",
    "text": "pre-commit.ci\n\nSupports GitHub but more to come in the future.\nZero configuration, just need .pre-commit-config.yaml.\nCorrects & commits issues automatically (e.g.¬†black) without need for developer to reformat.\nAutomatically updates .pre-commit-config.yaml for you (e.g.¬†new rev).\nFree for open source repositories (paid for version for private/organisation repositories).\n\n\nPre-commit.ci is a continuous integration service for the pre-commit framework.\nCurrently it only supports GitHub but apparently support is in development for other platforms such as GitLab and so forth.\nIts really easy to use, you don‚Äôt have to provide any specific configuration (although you can if you want to and I‚Äôll get to that shortly).\nIf the configured pre-commit hooks make changes to your files such as black does pre-commit.ci will automatically fix the pull request.\nIt will also automatically keep you .pre-commit-config.yaml up-to-date when new revisions come out.\nIts free for open source repositories, there are paid for options for private and organisation repositories."
  },
  {
    "objectID": "index.html#configuration-.pre-commit-config.yaml",
    "href": "index.html#configuration-.pre-commit-config.yaml",
    "title": "Pre-commit : Protecting your future self",
    "section": "Configuration (.pre-commit-config.yaml)",
    "text": "Configuration (.pre-commit-config.yaml)\n\nci:\n  autofix_prs: true\n  autofix_commit_msg: '[pre-commit.ci] Fixing issues with pre-commit'\n  autoupdate_schedule: weekly\n  autoupdate_commit_msg: '[pre-commit.ci] pre-commit automatically updated.'\n  skip: [flake8] # Optionally list ids of hooks to skip on CI\n\nYou can if you want configure pre-commit.ci with a ci: section in your .pre-commit-config.yaml, this example shows some explicit options to automatically fix pull requests and the message to add when doing so.\nThe update schedule is set to run weekly and as an example the flake8 hook is set to be skipped."
  },
  {
    "objectID": "index.html#pre-commit.ci-setup",
    "href": "index.html#pre-commit.ci-setup",
    "title": "Pre-commit : Protecting your future self",
    "section": "pre-commit.ci Setup",
    "text": "pre-commit.ci Setup\n\nSign-in with GitHub at https://pre-commit.ci\nGrant permission to your account.\n\n\n\nTo use pre-commit.ci just sign in with your GitHub credentials.\nYou can then follow the link to manage which repositories pre-commit.ci has access to on GitHub."
  },
  {
    "objectID": "index.html#manage-repos-for-pre-commit.ci",
    "href": "index.html#manage-repos-for-pre-commit.ci",
    "title": "Pre-commit : Protecting your future self",
    "section": "Manage Repos for pre-commit.ci",
    "text": "Manage Repos for pre-commit.ci\n\nGitLab pre-commit\n\nYou can provide pre-commit.ci access to all of your repositories or fine grained control to only specific repositories and that is all you need to do. Now when you push to master or main or make pull requests pre-commit.ci will run."
  },
  {
    "objectID": "index.html#add-pre-commit-badge",
    "href": "index.html#add-pre-commit-badge",
    "title": "Pre-commit : Protecting your future self",
    "section": "Add pre-commit badge",
    "text": "Add pre-commit badge\n\n\nAdd a pre-commit badge to your repositories README.md and it will show if it has passed or failed the tests."
  },
  {
    "objectID": "index.html#summary",
    "href": "index.html#summary",
    "title": "Pre-commit : Protecting your future self",
    "section": "Summary",
    "text": "Summary\n\n‚úîÔ∏è pre-commit is useful for automating repetitive tasks.\n‚úîÔ∏è Improves code quality by ensuring style guides are adhered to.\n‚úîÔ∏è Automates running test suites and ensures they pass.\n‚úîÔ∏è Integrates with CI/CD on GitHub and others.\n‚úîÔ∏è Frees up developer time."
  },
  {
    "objectID": "index.html#bonus---linting-with-ide",
    "href": "index.html#bonus---linting-with-ide",
    "title": "Pre-commit : Protecting your future self",
    "section": "Bonus - Linting with IDE",
    "text": "Bonus - Linting with IDE\nPopular IDEs have tools to run linting automatically on file save‚Ä¶\n\nEmacs : blacken / Flycheck / Pylint & Flymake\nVSCode : Python\nPyCharm : black / Mypy / flake8\nRStudio : lintr\n\n\nMany popular Integrated Development Environments support linting of code on the fly or on saving files, Emacs has blacken and flycheck modes, the later of which will run flake8.\nVSCode has a Python module for linting.\nPyCharm has plugins for black, mypy and flake8\nRStudio has support for the lintr package (as does Emacs).\nUsing these tools is sensible as it can highlight quickly and early on problems with your code. Applying black automatically also takes out some mental overhead in thinking about whether you are using the correct formatting whilst writing code allowing you to focus on the problem you are trying to solve.\n\n\n\nns-rse.github.io/pre-commit/"
  }
]